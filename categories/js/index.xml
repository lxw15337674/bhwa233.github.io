<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>js - Category - Bhwa233 blog</title>
        <link>/categories/js/</link>
        <description>js - Category - Bhwa233 blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 11 May 2023 14:49:27 &#43;0800</lastBuildDate><atom:link href="/categories/js/" rel="self" type="application/rss+xml" /><item>
    <title>保留小数位-toFixed的坑</title>
    <link>/posts/js/toFixed/</link>
    <pubDate>Thu, 11 May 2023 14:49:27 &#43;0800</pubDate>
    <author>Bhwa233</author>
    <guid>/posts/js/toFixed/</guid>
    <description><![CDATA[背景 开发过程中，遇到 需要对小数进行四舍五入的需求：首先想到的是 Number.toFixed(pre) 这个 API 的使用。 问题 预期的四舍五入结果： 65967.005.toFixed(2) // 65967.01 12859.005.toFixed(2) // 12859.01 控制台实际输出的结果： 65967.005.toFixed(2) //]]></description>
</item>
<item>
    <title>JS装饰器（Decorator）</title>
    <link>/posts/js/%E8%A3%85%E9%A5%B0%E5%99%A8/</link>
    <pubDate>Mon, 19 Sep 2022 15:09:32 &#43;0800</pubDate>
    <author>Bhwa233</author>
    <guid>/posts/js/%E8%A3%85%E9%A5%B0%E5%99%A8/</guid>
    <description><![CDATA[概念 装饰器是 ES7 的一个新语法，在Typescript已经支持。作用就是**对一些对象进行装饰后返回一个被包装过的对象。**装饰器本质是基于Ob]]></description>
</item>
<item>
    <title>浅拷贝与深拷贝</title>
    <link>/posts/js/%E6%8B%B7%E8%B4%9D/</link>
    <pubDate>Sun, 04 Sep 2022 14:05:12 &#43;0800</pubDate>
    <author>Bhwa233</author>
    <guid>/posts/js/%E6%8B%B7%E8%B4%9D/</guid>
    <description><![CDATA[总结 浅拷贝 基本类型：拷贝值 引用类型：拷贝对象引用。 深拷贝 基本类型：拷贝值 引用类型：会创建一个新的引用，将之前的对象完整的拷贝一份出来，并添加]]></description>
</item>
<item>
    <title>js中三类For循环</title>
    <link>/posts/js/for%E5%BE%AA%E7%8E%AF/</link>
    <pubDate>Sat, 03 Sep 2022 15:39:17 &#43;0800</pubDate>
    <author>Bhwa233</author>
    <guid>/posts/js/for%E5%BE%AA%E7%8E%AF/</guid>
    <description><![CDATA[总结 性能对比： for 与 while 基础 var 循环的时候，两者性能差不多 let arr = new Array(9999999).fill(0); console.time(&#39;for&#39;) for(var i = 0; i &lt; arr.length; i++) {} console.timeEnd(&#39;for&#39;) // for: 8.13818359375 ms console.time(&#39;while&#39;) var i = 0; while(i &lt; arr.length) { i++; } console.timeEnd(&#39;while&#39;) // while: 8.020751953125 ms var 没有块级作用域]]></description>
</item>
<item>
    <title>前端模块化输出</title>
    <link>/posts/packages/module/</link>
    <pubDate>Thu, 28 Jul 2022 21:17:45 &#43;0800</pubDate>
    <author>Bhwa233</author>
    <guid>/posts/packages/module/</guid>
    <description><![CDATA[模块化主要是用来抽离公共代码，隔离作用域，避免变量冲突等。 无模块化 CommonJS规范 AMD规范 CMD规范 ES6模块化 适用 服务端 浏览器端 浏览]]></description>
</item>
</channel>
</rss>
