<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Bhwa233 blog</title>
        <link>/</link>
        <description>This is my cool site</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 18 May 2023 15:02:01 &#43;0800</lastBuildDate>
            <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>Hugo lovelt的搜索坑</title>
    <link>/posts/hugo/</link>
    <pubDate>Sat, 06 Aug 2022 19:30:28 &#43;0800</pubDate>
    <author>Bhwa233</author>
    <guid>/posts/hugo/</guid>
    <description><![CDATA[lovelt主题的搜索，提供了Lunr.js 、algolia, 两个搜索引擎，但是都很麻烦。 首先lunr简单，但不支持中文检索，中文分词依赖库]]></description>
</item>
<item>
    <title>鼠标、键盘事件</title>
    <link>/posts/js/event/</link>
    <pubDate>Sun, 31 Jul 2022 16:08:26 &#43;0800</pubDate>
    <author>Bhwa233</author>
    <guid>/posts/js/event/</guid>
    <description><![CDATA[由于开发富文本中遇到中文输入法输入等问题，所以总结一下。 键盘事件 触发顺序 普通输入 keydown -&gt;keypress -&gt; input-&gt;change-&gt; keyup 输入法输入 输入时 keydown -&gt;CompositionStart-&gt;CompositionUpdate -&gt; input-&gt;change-&gt;onCompositionEnd -&gt;keyup 普通事件 在keyup 事件]]></description>
</item>
<item>
    <title>Slate transform API 详细说明</title>
    <link>/posts/richtext/slateApi/</link>
    <pubDate>Sat, 13 Aug 2022 16:04:44 &#43;0800</pubDate>
    <author>Bhwa233</author>
    <guid>/posts/richtext/slateApi/</guid>
    <description><![CDATA[通用配置 NodeOptions interface NodeOptions { at?: Location; // 需要操作的节点，默认为选区。 match?: NodeMatch&lt;T&gt;; // 自定义匹配方法。 // 指明Editor.nodes(),以哪种模式遍历slate node tree // &#39;all&#39;:]]></description>
</item>
<item>
    <title>保留小数位-toFixed的坑</title>
    <link>/posts/js/toFixed/</link>
    <pubDate>Thu, 11 May 2023 14:49:27 &#43;0800</pubDate>
    <author>Bhwa233</author>
    <guid>/posts/js/toFixed/</guid>
    <description><![CDATA[背景 开发过程中，遇到 需要对小数进行四舍五入的需求：首先想到的是 Number.toFixed(pre) 这个 API 的使用。 问题 预期的四舍五入结果： 65967.005.toFixed(2) // 65967.01 12859.005.toFixed(2) // 12859.01 控制台实际输出的结果： 65967.005.toFixed(2) //]]></description>
</item>
<item>
    <title>Zustand</title>
    <link>/posts/react/zustand/</link>
    <pubDate>Wed, 29 Mar 2023 15:22:32 &#43;0800</pubDate>
    <author>Bhwa233</author>
    <guid>/posts/react/zustand/</guid>
    <description><![CDATA[zustand是一个react的状态管理库，可以替代context、redux使用。 创建Store set用于修改store属性，get获取s]]></description>
</item>
<item>
    <title>CodeStyle.md</title>
    <link>/posts/codeStyle/</link>
    <pubDate>Tue, 28 Mar 2023 11:46:48 &#43;0800</pubDate>
    <author>Bhwa233</author>
    <guid>/posts/codeStyle/</guid>
    <description><![CDATA[Code Style 提前返回 在 function 中经常会遇到变量值为 undefined 的情况，这个时候则需要提前判断并阻止执行，避免一些不必要的分支（无 else），让代码更精炼。 if (userInfo) { // 执]]></description>
</item>
<item>
    <title>异常监控</title>
    <link>/posts/monitor/js%E9%94%99%E8%AF%AF/</link>
    <pubDate>Wed, 15 Mar 2023 14:47:44 &#43;0800</pubDate>
    <author>Bhwa233</author>
    <guid>/posts/monitor/js%E9%94%99%E8%AF%AF/</guid>
    <description><![CDATA[异常类型 JS错误 在 JavaScript 中，Error 是一种标准的内置对象，用于表示运行时错误和异常。Error 对象可以通过 throw 语句抛出，由 try&hellip;catch 语句捕获并处理。 一个]]></description>
</item>
<item>
    <title>依赖倒置、控制反转，依赖注入</title>
    <link>/posts/design/mode/</link>
    <pubDate>Tue, 14 Mar 2023 17:31:12 &#43;0800</pubDate>
    <author>Bhwa233</author>
    <guid>/posts/design/mode/</guid>
    <description><![CDATA[通过定义抽象的接口，我们可以将高层应用和具体的底层模块解耦。应用程序不需要关心具体实现细节，而是通过接口来访问底层模块的功能。当需要使用不同]]></description>
</item>
<item>
    <title>状态管理</title>
    <link>/posts/react/%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/</link>
    <pubDate>Wed, 22 Feb 2023 18:04:37 &#43;0800</pubDate>
    <author>Bhwa233</author>
    <guid>/posts/react/%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/</guid>
    <description><![CDATA[关于react 的状态管理 Provider + Context（useContext） 一个完整的例子 import React, { createContext, Dispatch, SetStateAction, useState, } from &#39;react&#39;; export interface IState { theme: string; color: string; } interface Props { count: number; setCount: Dispatch&lt;SetStateAction&lt;number&gt;&gt;; } const Context =]]></description>
</item>
<item>
    <title>性能监控基础</title>
    <link>/posts/monitor/%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E5%9F%BA%E7%A1%80/</link>
    <pubDate>Wed, 16 Nov 2022 11:51:57 &#43;0800</pubDate>
    <author>Bhwa233</author>
    <guid>/posts/monitor/%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E5%9F%BA%E7%A1%80/</guid>
    <description><![CDATA[性能监控基础 前端应用渲染模型 CSR：Client Side Rendering，客户端（通常是浏览器）渲染； SSR：Server Side Rendering，]]></description>
</item>
</channel>
</rss>
