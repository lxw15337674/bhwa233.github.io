<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Bhwa233 blog</title>
        <link>/</link>
        <description>This is my cool site</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 28 Mar 2023 11:46:48 &#43;0800</lastBuildDate>
            <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>Hugo lovelt的搜索坑</title>
    <link>/posts/hugo/</link>
    <pubDate>Sat, 06 Aug 2022 19:30:28 &#43;0800</pubDate>
    <author>Bhwa233</author>
    <guid>/posts/hugo/</guid>
    <description><![CDATA[lovelt主题的搜索，提供了Lunr.js 、algolia, 两个搜索引擎，但是都很麻烦。 首先lunr简单，但不支持中文检索，中文分词依赖库]]></description>
</item>
<item>
    <title>Typescript语法</title>
    <link>/posts/typescript/tool/</link>
    <pubDate>Fri, 01 Jul 2022 17:42:18 &#43;0800</pubDate>
    <author>Bhwa233</author>
    <guid>/posts/typescript/tool/</guid>
    <description><![CDATA[高级类型 字面量类型（literal types） 值作为类型。 type foo = &#34;Hello&#34; // foo 的类型就是&#34;hello&#34;,而不是string类型。 foo =&#34;hello&#34;]]></description>
</item>
<item>
    <title>Slate transform API 详细说明</title>
    <link>/posts/richtext/slateApi/</link>
    <pubDate>Sat, 13 Aug 2022 16:04:44 &#43;0800</pubDate>
    <author>Bhwa233</author>
    <guid>/posts/richtext/slateApi/</guid>
    <description><![CDATA[通用配置 NodeOptions interface NodeOptions { at?: Location; // 需要操作的节点，默认为选区。 match?: NodeMatch&lt;T&gt;; // 自定义匹配方法。 // 指明Editor.nodes(),以哪种模式遍历slate node tree // &#39;all&#39;:]]></description>
</item>
<item>
    <title>CodeStyle.md</title>
    <link>/posts/codeStyle/</link>
    <pubDate>Tue, 28 Mar 2023 11:46:48 &#43;0800</pubDate>
    <author>Bhwa233</author>
    <guid>/posts/codeStyle/</guid>
    <description><![CDATA[Code Style 提前返回 在 function 中经常会遇到变量值为 undefined 的情况，这个时候则需要提前判断并阻止执行，避免一些不必要的分支（无 else），让代码更精炼。 if (userInfo) { // 执]]></description>
</item>
<item>
    <title>异常监控</title>
    <link>/posts/%E7%9B%91%E6%8E%A7/js%E9%94%99%E8%AF%AF/</link>
    <pubDate>Wed, 15 Mar 2023 14:47:44 &#43;0800</pubDate>
    <author>Bhwa233</author>
    <guid>/posts/%E7%9B%91%E6%8E%A7/js%E9%94%99%E8%AF%AF/</guid>
    <description><![CDATA[异常类型 JS错误 在 JavaScript 中，Error 是一种标准的内置对象，用于表示运行时错误和异常。Error 对象可以通过 throw 语句抛出，由 try&hellip;catch 语句捕获并处理。 一个]]></description>
</item>
<item>
    <title>依赖倒置、控制反转，依赖注入</title>
    <link>/posts/design/mode/</link>
    <pubDate>Tue, 14 Mar 2023 17:31:12 &#43;0800</pubDate>
    <author>Bhwa233</author>
    <guid>/posts/design/mode/</guid>
    <description><![CDATA[通过定义抽象的接口，我们可以将高层应用和具体的底层模块解耦。应用程序不需要关心具体实现细节，而是通过接口来访问底层模块的功能。当需要使用不同]]></description>
</item>
<item>
    <title>状态管理</title>
    <link>/posts/react/%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/</link>
    <pubDate>Wed, 22 Feb 2023 18:04:37 &#43;0800</pubDate>
    <author>Bhwa233</author>
    <guid>/posts/react/%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/</guid>
    <description><![CDATA[关于react 的状态管理 Provider + Context（useContext） 一个完整的例子 import React, { createContext, Dispatch, SetStateAction, useState, } from &#39;react&#39;; export interface IState { theme: string; color: string; } interface Props { count: number; setCount: Dispatch&lt;SetStateAction&lt;number&gt;&gt;; } const Context =]]></description>
</item>
<item>
    <title>性能监控基础</title>
    <link>/posts/%E7%9B%91%E6%8E%A7/%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E5%9F%BA%E7%A1%80/</link>
    <pubDate>Wed, 16 Nov 2022 11:51:57 &#43;0800</pubDate>
    <author>Bhwa233</author>
    <guid>/posts/%E7%9B%91%E6%8E%A7/%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E5%9F%BA%E7%A1%80/</guid>
    <description><![CDATA[性能监控基础 前端应用渲染模型 CSR：Client Side Rendering，客户端（通常是浏览器）渲染； SSR：Server Side Rendering，]]></description>
</item>
<item>
    <title>性能优化之分片</title>
    <link>/posts/js/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8B%E5%88%86%E7%89%87/</link>
    <pubDate>Thu, 27 Oct 2022 18:50:41 &#43;0800</pubDate>
    <author>Bhwa233</author>
    <guid>/posts/js/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8B%E5%88%86%E7%89%87/</guid>
    <description><![CDATA[痛点 在进行耗时长的任务时，如果同步执行，会造成页面卡顿。比如js进行复杂的运算，页面渲染大量的DOM节点。在这种情况可以通过分片的思想来优化]]></description>
</item>
<item>
    <title>vscode 插件开发踩坑</title>
    <link>/posts/vscode/note/</link>
    <pubDate>Wed, 12 Oct 2022 16:38:06 &#43;0800</pubDate>
    <author>Bhwa233</author>
    <guid>/posts/vscode/note/</guid>
    <description><![CDATA[中文翻译文档：https://liiked.github.io/VS-Code-Extension-Doc-ZH/#/ 关于@types/no]]></description>
</item>
</channel>
</rss>
